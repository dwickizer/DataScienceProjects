a<-available_packages()
a<-available.packages()
head(rownames(a),15)
install.packages("slidify")
install.packages("ggplot2")
install.packages(c("MASS", "Matrix", "mgcv"))
search()
install.packages("devtools")
library(ggplot2)
search()
library(devtools)
search()
install.packages("devtools")
help
help()
library(devtools)
install.packages("KernSmooth")
install_github(slidify','ramnathv'')
install_github('slidify','ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(KernsmithR)
library(Kernsmith)
library(KernsmoothR)
library(Kernsmooth)
install.packages("KernSmoothIRT")
library(KernsmoothIRT)
library(kernsmooth)
library()
library(KernSmooth)
q()
q()
add2 <- function (x,y){
x + y
}
add2(8,9)
above <- function(x,n) {
use <- x > n
x[use]
}
above(10:20, 10)
above <- function(x,n = 10) {
use <- x > n
x[use]
}
above(1:20)
columnmean <- function(x){
nc <- ncol(x)
means <- numeric(nc)
for (in in 1:nc){
means[i] <- mean(y[,i])
}
means
}
columnmean <- function(x){
nc <- ncol(x)
means <- numeric(nc)
for (in in 1:nc){
means[i] <- mean(y[,i])
}
means
}
columnmean <- function(x){
nc <- ncol(x)
means <- numeric(nc)
for (in in 1:nc){
means[i] <- mean(x[,i])
}
means
}
columnmean <- function(x){
nc <- ncol(x)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(x[,i])
}
means
}
columnmean(airquality)
columnmean <- function(x, removeNA = TRUE){
nc <- ncol(x)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(x[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality, removeNA=FALSE)
columnmean <- function(x, removeNA = TRUE){
nc <- ncol(x)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(x[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
search()
f <- function(x,y){}
f <- function(x,y){
x^2 + y/z
}
z <- 3
f(4,3)
make.power <- function (n) {
pow <- function (x) {
x^n
}
pow
}
cube <- make.power(3)
square <- make.power(2)
cube(3)
square(2)
ls(environment(cube))
ls(environment(square))
ls(environment(make.power))
ls(environment())
ls()
clear
clr
get ("n", environment(cube))
get ("n", environment(square))
make.power <- function (n) { ## Returns a function, pow
pow <- function (x) {
x^n  ## n is defined within make.power's environment
}
pow
}
x <- matrix(1:4, 2, 2)
x
y <- matrix(rep(4),2,2)
y
x %*% y
x * y
x
y
?unclass
as.date("1970-01-01")
as.Date("1970-01-01")
x <-as.Date("1970-01-01")
class(x)
unclass(x)
x <-as.Date("1958-08-01")
x
unclass(x)
unclass(as.Date("2014-08-10"))
x <- Sys.time()
x
p <- as.POSIXlt(x)
p
unclass(p)
names(unclass(p))
p$sec
p
p$year
p$mon
p$mday
p$yday
?as.POSIXlt
weekdays(p)
months(p)
years(p)
year(p)
quarters(p)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
cube <- function(x, n) {
x^3
}
cube(3)
<- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
f
f <- 1
class(h)
names(class(h))
unclass(h)
?h
L
d <- 3L
d
setwd("./Desktop/Data Science - Johns Hopkins//DataScienceProjects//2. R_Programming//Assignment 2")
ls
