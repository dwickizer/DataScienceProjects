a<-available_packages()
a<-available.packages()
head(rownames(a),15)
install.packages("slidify")
install.packages("ggplot2")
install.packages(c("MASS", "Matrix", "mgcv"))
search()
install.packages("devtools")
library(ggplot2)
search()
library(devtools)
search()
install.packages("devtools")
help
help()
library(devtools)
install.packages("KernSmooth")
install_github(slidify','ramnathv'')
install_github('slidify','ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(KernsmithR)
library(Kernsmith)
library(KernsmoothR)
library(Kernsmooth)
install.packages("KernSmoothIRT")
library(KernsmoothIRT)
library(kernsmooth)
library()
library(KernSmooth)
q()
q()
add2 <- function (x,y){
x + y
}
add2(8,9)
above <- function(x,n) {
use <- x > n
x[use]
}
above(10:20, 10)
above <- function(x,n = 10) {
use <- x > n
x[use]
}
above(1:20)
columnmean <- function(x){
nc <- ncol(x)
means <- numeric(nc)
for (in in 1:nc){
means[i] <- mean(y[,i])
}
means
}
columnmean <- function(x){
nc <- ncol(x)
means <- numeric(nc)
for (in in 1:nc){
means[i] <- mean(y[,i])
}
means
}
columnmean <- function(x){
nc <- ncol(x)
means <- numeric(nc)
for (in in 1:nc){
means[i] <- mean(x[,i])
}
means
}
columnmean <- function(x){
nc <- ncol(x)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(x[,i])
}
means
}
columnmean(airquality)
columnmean <- function(x, removeNA = TRUE){
nc <- ncol(x)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(x[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality, removeNA=FALSE)
columnmean <- function(x, removeNA = TRUE){
nc <- ncol(x)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(x[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
search()
f <- function(x,y){}
f <- function(x,y){
x^2 + y/z
}
z <- 3
f(4,3)
make.power <- function (n) {
pow <- function (x) {
x^n
}
pow
}
cube <- make.power(3)
square <- make.power(2)
cube(3)
square(2)
ls(environment(cube))
ls(environment(square))
ls(environment(make.power))
ls(environment())
ls()
clear
clr
get ("n", environment(cube))
get ("n", environment(square))
make.power <- function (n) { ## Returns a function, pow
pow <- function (x) {
x^n  ## n is defined within make.power's environment
}
pow
}
x <- matrix(1:4, 2, 2)
x
y <- matrix(rep(4),2,2)
y
x %*% y
x * y
x
y
?unclass
as.date("1970-01-01")
as.Date("1970-01-01")
x <-as.Date("1970-01-01")
class(x)
unclass(x)
x <-as.Date("1958-08-01")
x
unclass(x)
unclass(as.Date("2014-08-10"))
x <- Sys.time()
x
p <- as.POSIXlt(x)
p
unclass(p)
names(unclass(p))
p$sec
p
p$year
p$mon
p$mday
p$yday
?as.POSIXlt
weekdays(p)
months(p)
years(p)
year(p)
quarters(p)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
cube <- function(x, n) {
x^3
}
cube(3)
<- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
f
f <- 1
class(h)
names(class(h))
unclass(h)
?h
L
d <- 3L
d
library("swirl")
swirl()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year()
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
ymd("1989-05-17")
mydate <- ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
now()
this_moment <- update(this_moment, hours = 13, minutes = 59)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval()
?new_interval
how_long <- new_interval(arrive, last_time)
how_long <- new_interval(arrive, last_time, tzone = "Singapore"
)
how_long <- (last_time, arrive)
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library("swirl")
swirl
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
skip()
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(crank r_version == "3.1.1", country == "US")
filter(crank, r_version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == IN")
)
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
sessionInfo()
.file.exists("~/Desktop")
file.exists("~/Desktop")
dir.exists("~/Desktop")
file.exists("~/ralph")
?download.file
fileurl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
getwd(0)
getwd()
setwd("~/Desktop/Data Science - Johns Hopkins/DataScienceProjects/3. GettingAndCleaningData/")
dir.create("cam_data")
source("getCameraData.R")
source("getCameraData.R")
source("getCameraData.R")
source("getCameraData.R")
list.files()
list.files("./cam_data/")
source("getCameraData.R")
source("./getCameraData.R")
source("./getCameraData.R")
source("./getCameraData.R")
source("./getCameraData.R")
head("cam_data//cameras.csv")
head("cam_data/cameras.csv")
cameras <- read.csv("cam_data//cameras.csv", header = TRUE, sep = ",")
head(cameras)
source("getCameraData.R")
getCameraData()
rm.files("./cam_data")
?remove.files
?delete.files
?files
file.remove("./cam_data")
file.remove("./cam_data/*")
file.remove("./cam_data/cameras.csv")
file.remove("./cam_data")
source("getCameraData.R")
getCameraData()
cameraData <- getCameraData()
head(cameraData)
